plugins {
    id 'java'
    id 'jacoco' // code coverage
//    id "com.github.spotbugs" version "6.1.2" apply false
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://oss.sonatype.org/content/repositories/snapshots")
    }
}


/*
apply plugin: 'com.github.spotbugs'

spotbugs {
    toolVersion = '4.9.1'
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
*/
jar {
    manifest {
        attributes 'Main-Class': 'Main.Prover'
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:all"
            options.release = 17
            sourceCompatibility = '17'
            targetCompatibility = '17'
        }
    }
}

jacoco {
    toolVersion = "0.8.12"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

dependencies {
    implementation 'it.unimi.dsi:fastutil:8.5.15'
    implementation 'dk.brics:automaton:1.12-4'
    implementation 'net.automatalib:automata-serialization-ba:0.12.0'
    implementation 'net.automatalib:automata-util:0.12.0'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.2.0' // for OTF
    implementation(files("libs/OTF.jar"))
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.4'
//  compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
//  spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.13.0'
}

test {
    useJUnitPlatform()
}

test {
    failFast = true // stop unit/integration tests when there's a failure
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
apply plugin: 'java'

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}



task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'Main.Prover'
    }
    archiveBaseName = 'Walnut-all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
